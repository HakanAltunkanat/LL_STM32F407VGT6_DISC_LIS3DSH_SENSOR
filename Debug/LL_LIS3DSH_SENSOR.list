
LL_LIS3DSH_SENSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000efc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001084  08001084  00003008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001084  08001084  00003008  2**0
                  CONTENTS
  4 .ARM          00000000  08001084  08001084  00003008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001084  08001084  00003008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001084  08001084  00002084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001088  08001088  00002088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  0800108c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003008  2**0
                  CONTENTS
 10 .bss          00000020  20000008  20000008  00003008  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00003008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003008  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003203  00000000  00000000  00003038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b36  00000000  00000000  0000623b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003e8  00000000  00000000  00006d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002d8  00000000  00000000  00007160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a86d  00000000  00000000  00007438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003383  00000000  00000000  00021ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095a0b  00000000  00000000  00025028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000baa33  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f18  00000000  00000000  000baa78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000bb990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800106c 	.word	0x0800106c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	0800106c 	.word	0x0800106c

080001c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	f003 0307 	and.w	r3, r3, #7
 80001d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d8:	4b0c      	ldr	r3, [pc, #48]	@ (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001de:	68ba      	ldr	r2, [r7, #8]
 80001e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80001e4:	4013      	ands	r3, r2
 80001e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80001f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001fa:	4a04      	ldr	r2, [pc, #16]	@ (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	60d3      	str	r3, [r2, #12]
}
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	e000ed00 	.word	0xe000ed00

08000210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000214:	4b04      	ldr	r3, [pc, #16]	@ (8000228 <__NVIC_GetPriorityGrouping+0x18>)
 8000216:	68db      	ldr	r3, [r3, #12]
 8000218:	0a1b      	lsrs	r3, r3, #8
 800021a:	f003 0307 	and.w	r3, r3, #7
}
 800021e:	4618      	mov	r0, r3
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	e000ed00 	.word	0xe000ed00

0800022c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	6039      	str	r1, [r7, #0]
 8000236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023c:	2b00      	cmp	r3, #0
 800023e:	db0a      	blt.n	8000256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	b2da      	uxtb	r2, r3
 8000244:	490c      	ldr	r1, [pc, #48]	@ (8000278 <__NVIC_SetPriority+0x4c>)
 8000246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024a:	0112      	lsls	r2, r2, #4
 800024c:	b2d2      	uxtb	r2, r2
 800024e:	440b      	add	r3, r1
 8000250:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000254:	e00a      	b.n	800026c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	b2da      	uxtb	r2, r3
 800025a:	4908      	ldr	r1, [pc, #32]	@ (800027c <__NVIC_SetPriority+0x50>)
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	f003 030f 	and.w	r3, r3, #15
 8000262:	3b04      	subs	r3, #4
 8000264:	0112      	lsls	r2, r2, #4
 8000266:	b2d2      	uxtb	r2, r2
 8000268:	440b      	add	r3, r1
 800026a:	761a      	strb	r2, [r3, #24]
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	e000e100 	.word	0xe000e100
 800027c:	e000ed00 	.word	0xe000ed00

08000280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000280:	b480      	push	{r7}
 8000282:	b089      	sub	sp, #36	@ 0x24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	f003 0307 	and.w	r3, r3, #7
 8000292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000294:	69fb      	ldr	r3, [r7, #28]
 8000296:	f1c3 0307 	rsb	r3, r3, #7
 800029a:	2b04      	cmp	r3, #4
 800029c:	bf28      	it	cs
 800029e:	2304      	movcs	r3, #4
 80002a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a2:	69fb      	ldr	r3, [r7, #28]
 80002a4:	3304      	adds	r3, #4
 80002a6:	2b06      	cmp	r3, #6
 80002a8:	d902      	bls.n	80002b0 <NVIC_EncodePriority+0x30>
 80002aa:	69fb      	ldr	r3, [r7, #28]
 80002ac:	3b03      	subs	r3, #3
 80002ae:	e000      	b.n	80002b2 <NVIC_EncodePriority+0x32>
 80002b0:	2300      	movs	r3, #0
 80002b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b4:	f04f 32ff 	mov.w	r2, #4294967295
 80002b8:	69bb      	ldr	r3, [r7, #24]
 80002ba:	fa02 f303 	lsl.w	r3, r2, r3
 80002be:	43da      	mvns	r2, r3
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	401a      	ands	r2, r3
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002c8:	f04f 31ff 	mov.w	r1, #4294967295
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	fa01 f303 	lsl.w	r3, r1, r3
 80002d2:	43d9      	mvns	r1, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002d8:	4313      	orrs	r3, r2
         );
}
 80002da:	4618      	mov	r0, r3
 80002dc:	3724      	adds	r7, #36	@ 0x24
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
	...

080002e8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80002ec:	4b05      	ldr	r3, [pc, #20]	@ (8000304 <LL_RCC_HSE_Enable+0x1c>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a04      	ldr	r2, [pc, #16]	@ (8000304 <LL_RCC_HSE_Enable+0x1c>)
 80002f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002f6:	6013      	str	r3, [r2, #0]
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40023800 	.word	0x40023800

08000308 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800030c:	4b07      	ldr	r3, [pc, #28]	@ (800032c <LL_RCC_HSE_IsReady+0x24>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000314:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000318:	bf0c      	ite	eq
 800031a:	2301      	moveq	r3, #1
 800031c:	2300      	movne	r3, #0
 800031e:	b2db      	uxtb	r3, r3
}
 8000320:	4618      	mov	r0, r3
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	40023800 	.word	0x40023800

08000330 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000338:	4b06      	ldr	r3, [pc, #24]	@ (8000354 <LL_RCC_SetSysClkSource+0x24>)
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	f023 0203 	bic.w	r2, r3, #3
 8000340:	4904      	ldr	r1, [pc, #16]	@ (8000354 <LL_RCC_SetSysClkSource+0x24>)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4313      	orrs	r3, r2
 8000346:	608b      	str	r3, [r1, #8]
}
 8000348:	bf00      	nop
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	40023800 	.word	0x40023800

08000358 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800035c:	4b04      	ldr	r3, [pc, #16]	@ (8000370 <LL_RCC_GetSysClkSource+0x18>)
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	f003 030c 	and.w	r3, r3, #12
}
 8000364:	4618      	mov	r0, r3
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	40023800 	.word	0x40023800

08000374 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800037c:	4b06      	ldr	r3, [pc, #24]	@ (8000398 <LL_RCC_SetAHBPrescaler+0x24>)
 800037e:	689b      	ldr	r3, [r3, #8]
 8000380:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000384:	4904      	ldr	r1, [pc, #16]	@ (8000398 <LL_RCC_SetAHBPrescaler+0x24>)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4313      	orrs	r3, r2
 800038a:	608b      	str	r3, [r1, #8]
}
 800038c:	bf00      	nop
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr
 8000398:	40023800 	.word	0x40023800

0800039c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80003a4:	4b06      	ldr	r3, [pc, #24]	@ (80003c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80003ac:	4904      	ldr	r1, [pc, #16]	@ (80003c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	608b      	str	r3, [r1, #8]
}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr
 80003c0:	40023800 	.word	0x40023800

080003c4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80003cc:	4b06      	ldr	r3, [pc, #24]	@ (80003e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80003d4:	4904      	ldr	r1, [pc, #16]	@ (80003e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4313      	orrs	r3, r2
 80003da:	608b      	str	r3, [r1, #8]
}
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr
 80003e8:	40023800 	.word	0x40023800

080003ec <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80003f0:	4b05      	ldr	r3, [pc, #20]	@ (8000408 <LL_RCC_PLL_Enable+0x1c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a04      	ldr	r2, [pc, #16]	@ (8000408 <LL_RCC_PLL_Enable+0x1c>)
 80003f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80003fa:	6013      	str	r3, [r2, #0]
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	40023800 	.word	0x40023800

0800040c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000410:	4b07      	ldr	r3, [pc, #28]	@ (8000430 <LL_RCC_PLL_IsReady+0x24>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000418:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800041c:	bf0c      	ite	eq
 800041e:	2301      	moveq	r3, #1
 8000420:	2300      	movne	r3, #0
 8000422:	b2db      	uxtb	r3, r3
}
 8000424:	4618      	mov	r0, r3
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40023800 	.word	0x40023800

08000434 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	60f8      	str	r0, [r7, #12]
 800043c:	60b9      	str	r1, [r7, #8]
 800043e:	607a      	str	r2, [r7, #4]
 8000440:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000442:	4b0d      	ldr	r3, [pc, #52]	@ (8000478 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000444:	685a      	ldr	r2, [r3, #4]
 8000446:	4b0d      	ldr	r3, [pc, #52]	@ (800047c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000448:	4013      	ands	r3, r2
 800044a:	68f9      	ldr	r1, [r7, #12]
 800044c:	68ba      	ldr	r2, [r7, #8]
 800044e:	4311      	orrs	r1, r2
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	0192      	lsls	r2, r2, #6
 8000454:	430a      	orrs	r2, r1
 8000456:	4908      	ldr	r1, [pc, #32]	@ (8000478 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000458:	4313      	orrs	r3, r2
 800045a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800045c:	4b06      	ldr	r3, [pc, #24]	@ (8000478 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000464:	4904      	ldr	r1, [pc, #16]	@ (8000478 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	4313      	orrs	r3, r2
 800046a:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 800046c:	bf00      	nop
 800046e:	3714      	adds	r7, #20
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	40023800 	.word	0x40023800
 800047c:	ffbf8000 	.word	0xffbf8000

08000480 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000488:	4b08      	ldr	r3, [pc, #32]	@ (80004ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800048a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800048c:	4907      	ldr	r1, [pc, #28]	@ (80004ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000494:	4b05      	ldr	r3, [pc, #20]	@ (80004ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000496:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4013      	ands	r3, r2
 800049c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800049e:	68fb      	ldr	r3, [r7, #12]
}
 80004a0:	bf00      	nop
 80004a2:	3714      	adds	r7, #20
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	40023800 	.word	0x40023800

080004b0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80004b8:	4b08      	ldr	r3, [pc, #32]	@ (80004dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80004ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80004bc:	4907      	ldr	r1, [pc, #28]	@ (80004dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80004c4:	4b05      	ldr	r3, [pc, #20]	@ (80004dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80004c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4013      	ands	r3, r2
 80004cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ce:	68fb      	ldr	r3, [r7, #12]
}
 80004d0:	bf00      	nop
 80004d2:	3714      	adds	r7, #20
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	40023800 	.word	0x40023800

080004e0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004e8:	4b08      	ldr	r3, [pc, #32]	@ (800050c <LL_APB2_GRP1_EnableClock+0x2c>)
 80004ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80004ec:	4907      	ldr	r1, [pc, #28]	@ (800050c <LL_APB2_GRP1_EnableClock+0x2c>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4313      	orrs	r3, r2
 80004f2:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004f4:	4b05      	ldr	r3, [pc, #20]	@ (800050c <LL_APB2_GRP1_EnableClock+0x2c>)
 80004f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4013      	ands	r3, r2
 80004fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004fe:	68fb      	ldr	r3, [r7, #12]
}
 8000500:	bf00      	nop
 8000502:	3714      	adds	r7, #20
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	40023800 	.word	0x40023800

08000510 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <LL_FLASH_SetLatency+0x24>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f023 0207 	bic.w	r2, r3, #7
 8000520:	4904      	ldr	r1, [pc, #16]	@ (8000534 <LL_FLASH_SetLatency+0x24>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4313      	orrs	r3, r2
 8000526:	600b      	str	r3, [r1, #0]
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	40023c00 	.word	0x40023c00

08000538 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800053c:	4b04      	ldr	r3, [pc, #16]	@ (8000550 <LL_FLASH_GetLatency+0x18>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f003 0307 	and.w	r3, r3, #7
}
 8000544:	4618      	mov	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40023c00 	.word	0x40023c00

08000554 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800055c:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8000564:	4904      	ldr	r1, [pc, #16]	@ (8000578 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4313      	orrs	r3, r2
 800056a:	600b      	str	r3, [r1, #0]
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	40007000 	.word	0x40007000

0800057c <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000580:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000588:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800058c:	bf0c      	ite	eq
 800058e:	2301      	moveq	r3, #1
 8000590:	2300      	movne	r3, #0
 8000592:	b2db      	uxtb	r3, r3
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40007000 	.word	0x40007000

080005a4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	601a      	str	r2, [r3, #0]
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	f023 0210 	bic.w	r2, r3, #16
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	431a      	orrs	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	605a      	str	r2, [r3, #4]
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d101      	bne.n	8000602 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80005fe:	2301      	movs	r3, #1
 8000600:	e000      	b.n	8000604 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000602:	2300      	movs	r3, #0
}
 8000604:	4618      	mov	r0, r3
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	f003 0302 	and.w	r3, r3, #2
 8000620:	2b02      	cmp	r3, #2
 8000622:	d101      	bne.n	8000628 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000624:	2301      	movs	r3, #1
 8000626:	e000      	b.n	800062a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr

08000636 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8000636:	b480      	push	{r7}
 8000638:	b083      	sub	sp, #12
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000646:	2b80      	cmp	r3, #128	@ 0x80
 8000648:	d101      	bne.n	800064e <LL_SPI_IsActiveFlag_BSY+0x18>
 800064a:	2301      	movs	r3, #1
 800064c:	e000      	b.n	8000650 <LL_SPI_IsActiveFlag_BSY+0x1a>
 800064e:	2300      	movs	r3, #0
}
 8000650:	4618      	mov	r0, r3
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	330c      	adds	r3, #12
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	330c      	adds	r3, #12
 8000688:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	78fa      	ldrb	r2, [r7, #3]
 800068e:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	683a      	ldr	r2, [r7, #0]
 80006aa:	619a      	str	r2, [r3, #24]
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	041a      	lsls	r2, r3, #16
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	619a      	str	r2, [r3, #24]
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
	...

080006d8 <spi_write>:

uint8_t x_address=0x29, y_address=0x2B, z_adress=0X2D; //x,y,z data addresses
uint8_t x,y,z; //variables to hold x,y,z values

void spi_write(uint8_t address, uint8_t data)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	460a      	mov	r2, r1
 80006e2:	71fb      	strb	r3, [r7, #7]
 80006e4:	4613      	mov	r3, r2
 80006e6:	71bb      	strb	r3, [r7, #6]
	LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_3); //spi communication is started when enable pin is reset
 80006e8:	2108      	movs	r1, #8
 80006ea:	4818      	ldr	r0, [pc, #96]	@ (800074c <spi_write+0x74>)
 80006ec:	f7ff ffe4 	bl	80006b8 <LL_GPIO_ResetOutputPin>
	while(!LL_SPI_IsActiveFlag_TXE(SPI1)); //Tx buffer empty flag
 80006f0:	bf00      	nop
 80006f2:	4817      	ldr	r0, [pc, #92]	@ (8000750 <spi_write+0x78>)
 80006f4:	f7ff ff8c 	bl	8000610 <LL_SPI_IsActiveFlag_TXE>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d0f9      	beq.n	80006f2 <spi_write+0x1a>
	LL_SPI_TransmitData8(SPI1, address); //the register address is sent
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	4619      	mov	r1, r3
 8000702:	4813      	ldr	r0, [pc, #76]	@ (8000750 <spi_write+0x78>)
 8000704:	f7ff ffb8 	bl	8000678 <LL_SPI_TransmitData8>
	while(LL_SPI_IsActiveFlag_BSY(SPI1)); //spi busy flag
 8000708:	bf00      	nop
 800070a:	4811      	ldr	r0, [pc, #68]	@ (8000750 <spi_write+0x78>)
 800070c:	f7ff ff93 	bl	8000636 <LL_SPI_IsActiveFlag_BSY>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d1f9      	bne.n	800070a <spi_write+0x32>
	while(!LL_SPI_IsActiveFlag_TXE(SPI1));
 8000716:	bf00      	nop
 8000718:	480d      	ldr	r0, [pc, #52]	@ (8000750 <spi_write+0x78>)
 800071a:	f7ff ff79 	bl	8000610 <LL_SPI_IsActiveFlag_TXE>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d0f9      	beq.n	8000718 <spi_write+0x40>
	LL_SPI_TransmitData8(SPI1, data); //the data that will written on the register whose address is given
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	4619      	mov	r1, r3
 8000728:	4809      	ldr	r0, [pc, #36]	@ (8000750 <spi_write+0x78>)
 800072a:	f7ff ffa5 	bl	8000678 <LL_SPI_TransmitData8>
	while(LL_SPI_IsActiveFlag_BSY(SPI1));
 800072e:	bf00      	nop
 8000730:	4807      	ldr	r0, [pc, #28]	@ (8000750 <spi_write+0x78>)
 8000732:	f7ff ff80 	bl	8000636 <LL_SPI_IsActiveFlag_BSY>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d1f9      	bne.n	8000730 <spi_write+0x58>
	LL_GPIO_SetOutputPin(GPIOE, LL_GPIO_PIN_3); //spi communication is finalized
 800073c:	2108      	movs	r1, #8
 800073e:	4803      	ldr	r0, [pc, #12]	@ (800074c <spi_write+0x74>)
 8000740:	f7ff ffac 	bl	800069c <LL_GPIO_SetOutputPin>
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40021000 	.word	0x40021000
 8000750:	40013000 	.word	0x40013000

08000754 <spi_read>:

uint8_t spi_read(uint8_t address, uint8_t data)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	460a      	mov	r2, r1
 800075e:	71fb      	strb	r3, [r7, #7]
 8000760:	4613      	mov	r3, r2
 8000762:	71bb      	strb	r3, [r7, #6]
	uint8_t returned_value=0; //local variable to return value
 8000764:	2300      	movs	r3, #0
 8000766:	73fb      	strb	r3, [r7, #15]
	LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_3); //spi communication is started
 8000768:	2108      	movs	r1, #8
 800076a:	4824      	ldr	r0, [pc, #144]	@ (80007fc <spi_read+0xa8>)
 800076c:	f7ff ffa4 	bl	80006b8 <LL_GPIO_ResetOutputPin>
	address=address|0x80; //it starts read mode
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000776:	71fb      	strb	r3, [r7, #7]
	while(!LL_SPI_IsActiveFlag_TXE(SPI1)); //Tx buffer empty flag
 8000778:	bf00      	nop
 800077a:	4821      	ldr	r0, [pc, #132]	@ (8000800 <spi_read+0xac>)
 800077c:	f7ff ff48 	bl	8000610 <LL_SPI_IsActiveFlag_TXE>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0f9      	beq.n	800077a <spi_read+0x26>
	LL_SPI_TransmitData8(SPI1, address); //the related register address is sent
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4619      	mov	r1, r3
 800078a:	481d      	ldr	r0, [pc, #116]	@ (8000800 <spi_read+0xac>)
 800078c:	f7ff ff74 	bl	8000678 <LL_SPI_TransmitData8>
	while(LL_SPI_IsActiveFlag_BSY(SPI1)); //spi busy flag
 8000790:	bf00      	nop
 8000792:	481b      	ldr	r0, [pc, #108]	@ (8000800 <spi_read+0xac>)
 8000794:	f7ff ff4f 	bl	8000636 <LL_SPI_IsActiveFlag_BSY>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d1f9      	bne.n	8000792 <spi_read+0x3e>
	while(!LL_SPI_IsActiveFlag_RXNE(SPI1)); //rx buffer empty flag
 800079e:	bf00      	nop
 80007a0:	4817      	ldr	r0, [pc, #92]	@ (8000800 <spi_read+0xac>)
 80007a2:	f7ff ff22 	bl	80005ea <LL_SPI_IsActiveFlag_RXNE>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d0f9      	beq.n	80007a0 <spi_read+0x4c>
	returned_value=LL_SPI_ReceiveData8(SPI1); //the data is taken from the register whose address is sent
 80007ac:	4814      	ldr	r0, [pc, #80]	@ (8000800 <spi_read+0xac>)
 80007ae:	f7ff ff55 	bl	800065c <LL_SPI_ReceiveData8>
 80007b2:	4603      	mov	r3, r0
 80007b4:	73fb      	strb	r3, [r7, #15]
	while(LL_SPI_IsActiveFlag_BSY(SPI1));
 80007b6:	bf00      	nop
 80007b8:	4811      	ldr	r0, [pc, #68]	@ (8000800 <spi_read+0xac>)
 80007ba:	f7ff ff3c 	bl	8000636 <LL_SPI_IsActiveFlag_BSY>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d1f9      	bne.n	80007b8 <spi_read+0x64>
	while(!LL_SPI_IsActiveFlag_TXE(SPI1));
 80007c4:	bf00      	nop
 80007c6:	480e      	ldr	r0, [pc, #56]	@ (8000800 <spi_read+0xac>)
 80007c8:	f7ff ff22 	bl	8000610 <LL_SPI_IsActiveFlag_TXE>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d0f9      	beq.n	80007c6 <spi_read+0x72>
	LL_SPI_TransmitData8(SPI1, data); //new data is sent
 80007d2:	79bb      	ldrb	r3, [r7, #6]
 80007d4:	4619      	mov	r1, r3
 80007d6:	480a      	ldr	r0, [pc, #40]	@ (8000800 <spi_read+0xac>)
 80007d8:	f7ff ff4e 	bl	8000678 <LL_SPI_TransmitData8>
	while(LL_SPI_IsActiveFlag_BSY(SPI1));
 80007dc:	bf00      	nop
 80007de:	4808      	ldr	r0, [pc, #32]	@ (8000800 <spi_read+0xac>)
 80007e0:	f7ff ff29 	bl	8000636 <LL_SPI_IsActiveFlag_BSY>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d1f9      	bne.n	80007de <spi_read+0x8a>
	LL_GPIO_SetOutputPin(GPIOE, LL_GPIO_PIN_3); //spi communication is finalized
 80007ea:	2108      	movs	r1, #8
 80007ec:	4803      	ldr	r0, [pc, #12]	@ (80007fc <spi_read+0xa8>)
 80007ee:	f7ff ff55 	bl	800069c <LL_GPIO_SetOutputPin>
	return returned_value;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40021000 	.word	0x40021000
 8000800:	40013000 	.word	0x40013000

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000808:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800080c:	f7ff fe68 	bl	80004e0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000810:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000814:	f7ff fe4c 	bl	80004b0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000818:	2003      	movs	r0, #3
 800081a:	f7ff fcd5 	bl	80001c8 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800081e:	f7ff fcf7 	bl	8000210 <__NVIC_GetPriorityGrouping>
 8000822:	4603      	mov	r3, r0
 8000824:	2200      	movs	r2, #0
 8000826:	210f      	movs	r1, #15
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fd29 	bl	8000280 <NVIC_EncodePriority>
 800082e:	4603      	mov	r3, r0
 8000830:	4619      	mov	r1, r3
 8000832:	f04f 30ff 	mov.w	r0, #4294967295
 8000836:	f7ff fcf9 	bl	800022c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083a:	f000 f83d 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083e:	f000 f8d7 	bl	80009f0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000842:	f000 f883 	bl	800094c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LL_SPI_Enable(SPI1);
 8000846:	4815      	ldr	r0, [pc, #84]	@ (800089c <main+0x98>)
 8000848:	f7ff feac 	bl	80005a4 <LL_SPI_Enable>
  spi_write(0x20, 0x67); //control register address and control data for control parameters
 800084c:	2167      	movs	r1, #103	@ 0x67
 800084e:	2020      	movs	r0, #32
 8000850:	f7ff ff42 	bl	80006d8 <spi_write>
  spi_write(0x24, 0x18); //control register address and control data for control parameters
 8000854:	2118      	movs	r1, #24
 8000856:	2024      	movs	r0, #36	@ 0x24
 8000858:	f7ff ff3e 	bl	80006d8 <spi_write>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  x=spi_read(x_address, 0x00); //0x00 is sent to reset the x value for continious measurement
 800085c:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <main+0x9c>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ff76 	bl	8000754 <spi_read>
 8000868:	4603      	mov	r3, r0
 800086a:	461a      	mov	r2, r3
 800086c:	4b0d      	ldr	r3, [pc, #52]	@ (80008a4 <main+0xa0>)
 800086e:	701a      	strb	r2, [r3, #0]
	  y=spi_read(y_address, 0x00);
 8000870:	4b0d      	ldr	r3, [pc, #52]	@ (80008a8 <main+0xa4>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ff6c 	bl	8000754 <spi_read>
 800087c:	4603      	mov	r3, r0
 800087e:	461a      	mov	r2, r3
 8000880:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <main+0xa8>)
 8000882:	701a      	strb	r2, [r3, #0]
	  z=spi_read(z_adress, 0x00);
 8000884:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <main+0xac>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ff62 	bl	8000754 <spi_read>
 8000890:	4603      	mov	r3, r0
 8000892:	461a      	mov	r2, r3
 8000894:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <main+0xb0>)
 8000896:	701a      	strb	r2, [r3, #0]
	  x=spi_read(x_address, 0x00); //0x00 is sent to reset the x value for continious measurement
 8000898:	bf00      	nop
 800089a:	e7df      	b.n	800085c <main+0x58>
 800089c:	40013000 	.word	0x40013000
 80008a0:	20000000 	.word	0x20000000
 80008a4:	20000024 	.word	0x20000024
 80008a8:	20000001 	.word	0x20000001
 80008ac:	20000025 	.word	0x20000025
 80008b0:	20000002 	.word	0x20000002
 80008b4:	20000026 	.word	0x20000026

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 80008bc:	2005      	movs	r0, #5
 80008be:	f7ff fe27 	bl	8000510 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 80008c2:	bf00      	nop
 80008c4:	f7ff fe38 	bl	8000538 <LL_FLASH_GetLatency>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b05      	cmp	r3, #5
 80008cc:	d1fa      	bne.n	80008c4 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80008ce:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80008d2:	f7ff fe3f 	bl	8000554 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 80008d6:	f7ff fd07 	bl	80002e8 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80008da:	bf00      	nop
 80008dc:	f7ff fd14 	bl	8000308 <LL_RCC_HSE_IsReady>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d1fa      	bne.n	80008dc <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 80008e6:	2300      	movs	r3, #0
 80008e8:	22a8      	movs	r2, #168	@ 0xa8
 80008ea:	2104      	movs	r1, #4
 80008ec:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80008f0:	f7ff fda0 	bl	8000434 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80008f4:	f7ff fd7a 	bl	80003ec <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80008f8:	bf00      	nop
 80008fa:	f7ff fd87 	bl	800040c <LL_RCC_PLL_IsReady>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b01      	cmp	r3, #1
 8000902:	d1fa      	bne.n	80008fa <SystemClock_Config+0x42>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000904:	bf00      	nop
 8000906:	f7ff fe39 	bl	800057c <LL_PWR_IsActiveFlag_VOS>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d0fa      	beq.n	8000906 <SystemClock_Config+0x4e>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff fd2f 	bl	8000374 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000916:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800091a:	f7ff fd3f 	bl	800039c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 800091e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000922:	f7ff fd4f 	bl	80003c4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000926:	2002      	movs	r0, #2
 8000928:	f7ff fd02 	bl	8000330 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800092c:	bf00      	nop
 800092e:	f7ff fd13 	bl	8000358 <LL_RCC_GetSysClkSource>
 8000932:	4603      	mov	r3, r0
 8000934:	2b08      	cmp	r3, #8
 8000936:	d1fa      	bne.n	800092e <SystemClock_Config+0x76>
  {

  }
  LL_Init1msTick(168000000);
 8000938:	4803      	ldr	r0, [pc, #12]	@ (8000948 <SystemClock_Config+0x90>)
 800093a:	f000 fb4d 	bl	8000fd8 <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 800093e:	4802      	ldr	r0, [pc, #8]	@ (8000948 <SystemClock_Config+0x90>)
 8000940:	f000 fb58 	bl	8000ff4 <LL_SetSystemCoreClock>
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	0a037a00 	.word	0x0a037a00

0800094c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b090      	sub	sp, #64	@ 0x40
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000952:	f107 0318 	add.w	r3, r7, #24
 8000956:	2228      	movs	r2, #40	@ 0x28
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fb5a 	bl	8001014 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	463b      	mov	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
 800096e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000970:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000974:	f7ff fdb4 	bl	80004e0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000978:	2001      	movs	r0, #1
 800097a:	f7ff fd81 	bl	8000480 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800097e:	23e0      	movs	r3, #224	@ 0xe0
 8000980:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000982:	2302      	movs	r3, #2
 8000984:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000992:	2305      	movs	r3, #5
 8000994:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	463b      	mov	r3, r7
 8000998:	4619      	mov	r1, r3
 800099a:	4813      	ldr	r0, [pc, #76]	@ (80009e8 <MX_SPI1_Init+0x9c>)
 800099c:	f000 fa0c 	bl	8000db8 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80009a4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80009a8:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80009ae:	2302      	movs	r3, #2
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80009b2:	2301      	movs	r3, #1
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80009b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 80009bc:	2300      	movs	r3, #0
 80009be:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80009c0:	2300      	movs	r3, #0
 80009c2:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 80009c8:	230a      	movs	r3, #10
 80009ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80009cc:	f107 0318 	add.w	r3, r7, #24
 80009d0:	4619      	mov	r1, r3
 80009d2:	4806      	ldr	r0, [pc, #24]	@ (80009ec <MX_SPI1_Init+0xa0>)
 80009d4:	f000 fa94 	bl	8000f00 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80009d8:	2100      	movs	r1, #0
 80009da:	4804      	ldr	r0, [pc, #16]	@ (80009ec <MX_SPI1_Init+0xa0>)
 80009dc:	f7ff fdf2 	bl	80005c4 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	3740      	adds	r7, #64	@ 0x40
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40020000 	.word	0x40020000
 80009ec:	40013000 	.word	0x40013000

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	463b      	mov	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
 8000a04:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8000a06:	2010      	movs	r0, #16
 8000a08:	f7ff fd3a 	bl	8000480 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000a0c:	2080      	movs	r0, #128	@ 0x80
 8000a0e:	f7ff fd37 	bl	8000480 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000a12:	2001      	movs	r0, #1
 8000a14:	f7ff fd34 	bl	8000480 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_3);
 8000a18:	2108      	movs	r1, #8
 8000a1a:	480b      	ldr	r0, [pc, #44]	@ (8000a48 <MX_GPIO_Init+0x58>)
 8000a1c:	f7ff fe4c 	bl	80006b8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000a20:	2308      	movs	r3, #8
 8000a22:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a24:	2301      	movs	r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a30:	2300      	movs	r3, #0
 8000a32:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a34:	463b      	mov	r3, r7
 8000a36:	4619      	mov	r1, r3
 8000a38:	4803      	ldr	r0, [pc, #12]	@ (8000a48 <MX_GPIO_Init+0x58>)
 8000a3a:	f000 f9bd 	bl	8000db8 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a3e:	bf00      	nop
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <NMI_Handler+0x4>

08000a54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <HardFault_Handler+0x4>

08000a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <MemManage_Handler+0x4>

08000a64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <SystemInit+0x20>)
 8000ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ab6:	4a05      	ldr	r2, [pc, #20]	@ (8000acc <SystemInit+0x20>)
 8000ab8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000abc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ad0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ad4:	f7ff ffea 	bl	8000aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad8:	480c      	ldr	r0, [pc, #48]	@ (8000b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ada:	490d      	ldr	r1, [pc, #52]	@ (8000b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000adc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae0:	e002      	b.n	8000ae8 <LoopCopyDataInit>

08000ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae6:	3304      	adds	r3, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aec:	d3f9      	bcc.n	8000ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aee:	4a0a      	ldr	r2, [pc, #40]	@ (8000b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af0:	4c0a      	ldr	r4, [pc, #40]	@ (8000b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af4:	e001      	b.n	8000afa <LoopFillZerobss>

08000af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af8:	3204      	adds	r2, #4

08000afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000afc:	d3fb      	bcc.n	8000af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000afe:	f000 fa91 	bl	8001024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b02:	f7ff fe7f 	bl	8000804 <main>
  bx  lr    
 8000b06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000b14:	0800108c 	.word	0x0800108c
  ldr r2, =_sbss
 8000b18:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000b1c:	20000028 	.word	0x20000028

08000b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC_IRQHandler>

08000b22 <LL_GPIO_SetPinMode>:
{
 8000b22:	b480      	push	{r7}
 8000b24:	b08b      	sub	sp, #44	@ 0x2c
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	60f8      	str	r0, [r7, #12]
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	fa93 f3a3 	rbit	r3, r3
 8000b3c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d101      	bne.n	8000b4c <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000b48:	2320      	movs	r3, #32
 8000b4a:	e003      	b.n	8000b54 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	fab3 f383 	clz	r3, r3
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	2103      	movs	r1, #3
 8000b58:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	401a      	ands	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b64:	6a3b      	ldr	r3, [r7, #32]
 8000b66:	fa93 f3a3 	rbit	r3, r3
 8000b6a:	61fb      	str	r3, [r7, #28]
  return result;
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d101      	bne.n	8000b7a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000b76:	2320      	movs	r3, #32
 8000b78:	e003      	b.n	8000b82 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7c:	fab3 f383 	clz	r3, r3
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	6879      	ldr	r1, [r7, #4]
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	431a      	orrs	r2, r3
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	601a      	str	r2, [r3, #0]
}
 8000b90:	bf00      	nop
 8000b92:	372c      	adds	r7, #44	@ 0x2c
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <LL_GPIO_SetPinOutputType>:
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	685a      	ldr	r2, [r3, #4]
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	401a      	ands	r2, r3
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	6879      	ldr	r1, [r7, #4]
 8000bb6:	fb01 f303 	mul.w	r3, r1, r3
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	605a      	str	r2, [r3, #4]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <LL_GPIO_SetPinSpeed>:
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b08b      	sub	sp, #44	@ 0x2c
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	689a      	ldr	r2, [r3, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	fa93 f3a3 	rbit	r3, r3
 8000be6:	613b      	str	r3, [r7, #16]
  return result;
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d101      	bne.n	8000bf6 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8000bf2:	2320      	movs	r3, #32
 8000bf4:	e003      	b.n	8000bfe <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	fab3 f383 	clz	r3, r3
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	2103      	movs	r1, #3
 8000c02:	fa01 f303 	lsl.w	r3, r1, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	401a      	ands	r2, r3
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c0e:	6a3b      	ldr	r3, [r7, #32]
 8000c10:	fa93 f3a3 	rbit	r3, r3
 8000c14:	61fb      	str	r3, [r7, #28]
  return result;
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d101      	bne.n	8000c24 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8000c20:	2320      	movs	r3, #32
 8000c22:	e003      	b.n	8000c2c <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8000c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c26:	fab3 f383 	clz	r3, r3
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	fa01 f303 	lsl.w	r3, r1, r3
 8000c34:	431a      	orrs	r2, r3
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	609a      	str	r2, [r3, #8]
}
 8000c3a:	bf00      	nop
 8000c3c:	372c      	adds	r7, #44	@ 0x2c
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <LL_GPIO_SetPinPull>:
{
 8000c46:	b480      	push	{r7}
 8000c48:	b08b      	sub	sp, #44	@ 0x2c
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	60f8      	str	r0, [r7, #12]
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	68da      	ldr	r2, [r3, #12]
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	fa93 f3a3 	rbit	r3, r3
 8000c60:	613b      	str	r3, [r7, #16]
  return result;
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d101      	bne.n	8000c70 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000c6c:	2320      	movs	r3, #32
 8000c6e:	e003      	b.n	8000c78 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	fab3 f383 	clz	r3, r3
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	2103      	movs	r1, #3
 8000c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	401a      	ands	r2, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c88:	6a3b      	ldr	r3, [r7, #32]
 8000c8a:	fa93 f3a3 	rbit	r3, r3
 8000c8e:	61fb      	str	r3, [r7, #28]
  return result;
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d101      	bne.n	8000c9e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000c9a:	2320      	movs	r3, #32
 8000c9c:	e003      	b.n	8000ca6 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca0:	fab3 f383 	clz	r3, r3
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	6879      	ldr	r1, [r7, #4]
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	431a      	orrs	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	60da      	str	r2, [r3, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	372c      	adds	r7, #44	@ 0x2c
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <LL_GPIO_SetAFPin_0_7>:
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b08b      	sub	sp, #44	@ 0x2c
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	6a1a      	ldr	r2, [r3, #32]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa93 f3a3 	rbit	r3, r3
 8000cda:	613b      	str	r3, [r7, #16]
  return result;
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8000ce6:	2320      	movs	r3, #32
 8000ce8:	e003      	b.n	8000cf2 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	fab3 f383 	clz	r3, r3
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	210f      	movs	r1, #15
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	401a      	ands	r2, r3
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d02:	6a3b      	ldr	r3, [r7, #32]
 8000d04:	fa93 f3a3 	rbit	r3, r3
 8000d08:	61fb      	str	r3, [r7, #28]
  return result;
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d101      	bne.n	8000d18 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8000d14:	2320      	movs	r3, #32
 8000d16:	e003      	b.n	8000d20 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8000d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d1a:	fab3 f383 	clz	r3, r3
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	fa01 f303 	lsl.w	r3, r1, r3
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	621a      	str	r2, [r3, #32]
}
 8000d2e:	bf00      	nop
 8000d30:	372c      	adds	r7, #44	@ 0x2c
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <LL_GPIO_SetAFPin_8_15>:
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b08b      	sub	sp, #44	@ 0x2c
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	60f8      	str	r0, [r7, #12]
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa93 f3a3 	rbit	r3, r3
 8000d56:	613b      	str	r3, [r7, #16]
  return result;
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8000d62:	2320      	movs	r3, #32
 8000d64:	e003      	b.n	8000d6e <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	fab3 f383 	clz	r3, r3
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	210f      	movs	r1, #15
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	401a      	ands	r2, r3
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	fa93 f3a3 	rbit	r3, r3
 8000d86:	61fb      	str	r3, [r7, #28]
  return result;
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8000d92:	2320      	movs	r3, #32
 8000d94:	e003      	b.n	8000d9e <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8000d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d98:	fab3 f383 	clz	r3, r3
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	6879      	ldr	r1, [r7, #4]
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	431a      	orrs	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000dac:	bf00      	nop
 8000dae:	372c      	adds	r7, #44	@ 0x2c
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	@ 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	fa93 f3a3 	rbit	r3, r3
 8000dd6:	617b      	str	r3, [r7, #20]
  return result;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d101      	bne.n	8000de6 <LL_GPIO_Init+0x2e>
    return 32U;
 8000de2:	2320      	movs	r3, #32
 8000de4:	e003      	b.n	8000dee <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	fab3 f383 	clz	r3, r3
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000df0:	e057      	b.n	8000ea2 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	2101      	movs	r1, #1
 8000df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	4013      	ands	r3, r2
 8000e00:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8000e02:	6a3b      	ldr	r3, [r7, #32]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d049      	beq.n	8000e9c <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d003      	beq.n	8000e18 <LL_GPIO_Init+0x60>
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d10d      	bne.n	8000e34 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	6a39      	ldr	r1, [r7, #32]
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff fed3 	bl	8000bcc <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	6a39      	ldr	r1, [r7, #32]
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff feb4 	bl	8000b9c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	691b      	ldr	r3, [r3, #16]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	6a39      	ldr	r1, [r7, #32]
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff02 	bl	8000c46 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d121      	bne.n	8000e8e <LL_GPIO_Init+0xd6>
 8000e4a:	6a3b      	ldr	r3, [r7, #32]
 8000e4c:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	fa93 f3a3 	rbit	r3, r3
 8000e54:	60bb      	str	r3, [r7, #8]
  return result;
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d101      	bne.n	8000e64 <LL_GPIO_Init+0xac>
    return 32U;
 8000e60:	2320      	movs	r3, #32
 8000e62:	e003      	b.n	8000e6c <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	fab3 f383 	clz	r3, r3
 8000e6a:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000e6c:	2b07      	cmp	r3, #7
 8000e6e:	d807      	bhi.n	8000e80 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	461a      	mov	r2, r3
 8000e76:	6a39      	ldr	r1, [r7, #32]
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff ff21 	bl	8000cc0 <LL_GPIO_SetAFPin_0_7>
 8000e7e:	e006      	b.n	8000e8e <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	461a      	mov	r2, r3
 8000e86:	6a39      	ldr	r1, [r7, #32]
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff ff56 	bl	8000d3a <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	461a      	mov	r2, r3
 8000e94:	6a39      	ldr	r1, [r7, #32]
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff fe43 	bl	8000b22 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1a0      	bne.n	8000df2 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3728      	adds	r7, #40	@ 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <LL_SPI_IsEnabled>:
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eca:	2b40      	cmp	r3, #64	@ 0x40
 8000ecc:	d101      	bne.n	8000ed2 <LL_SPI_IsEnabled+0x18>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e000      	b.n	8000ed4 <LL_SPI_IsEnabled+0x1a>
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <LL_SPI_SetCRCPolynomial>:
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	461a      	mov	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	611a      	str	r2, [r3, #16]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffd3 	bl	8000eba <LL_SPI_IsEnabled>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d139      	bne.n	8000f8e <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000f22:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	6811      	ldr	r1, [r2, #0]
 8000f2a:	683a      	ldr	r2, [r7, #0]
 8000f2c:	6852      	ldr	r2, [r2, #4]
 8000f2e:	4311      	orrs	r1, r2
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	6892      	ldr	r2, [r2, #8]
 8000f34:	4311      	orrs	r1, r2
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	68d2      	ldr	r2, [r2, #12]
 8000f3a:	4311      	orrs	r1, r2
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	6912      	ldr	r2, [r2, #16]
 8000f40:	4311      	orrs	r1, r2
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	6952      	ldr	r2, [r2, #20]
 8000f46:	4311      	orrs	r1, r2
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	6992      	ldr	r2, [r2, #24]
 8000f4c:	4311      	orrs	r1, r2
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	69d2      	ldr	r2, [r2, #28]
 8000f52:	4311      	orrs	r1, r2
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	6a12      	ldr	r2, [r2, #32]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f023 0204 	bic.w	r2, r3, #4
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	0c1b      	lsrs	r3, r3, #16
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f7c:	d105      	bne.n	8000f8a <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f82:	4619      	mov	r1, r3
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff ffab 	bl	8000ee0 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	61da      	str	r2, [r3, #28]
  return status;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb6:	4a07      	ldr	r2, [pc, #28]	@ (8000fd4 <LL_InitTick+0x30>)
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <LL_InitTick+0x30>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <LL_InitTick+0x30>)
 8000fc4:	2205      	movs	r2, #5
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000fe0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ffdd 	bl	8000fa4 <LL_InitTick>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000ffc:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <LL_SetSystemCoreClock+0x1c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000004 	.word	0x20000004

08001014 <memset>:
 8001014:	4402      	add	r2, r0
 8001016:	4603      	mov	r3, r0
 8001018:	4293      	cmp	r3, r2
 800101a:	d100      	bne.n	800101e <memset+0xa>
 800101c:	4770      	bx	lr
 800101e:	f803 1b01 	strb.w	r1, [r3], #1
 8001022:	e7f9      	b.n	8001018 <memset+0x4>

08001024 <__libc_init_array>:
 8001024:	b570      	push	{r4, r5, r6, lr}
 8001026:	4d0d      	ldr	r5, [pc, #52]	@ (800105c <__libc_init_array+0x38>)
 8001028:	4c0d      	ldr	r4, [pc, #52]	@ (8001060 <__libc_init_array+0x3c>)
 800102a:	1b64      	subs	r4, r4, r5
 800102c:	10a4      	asrs	r4, r4, #2
 800102e:	2600      	movs	r6, #0
 8001030:	42a6      	cmp	r6, r4
 8001032:	d109      	bne.n	8001048 <__libc_init_array+0x24>
 8001034:	4d0b      	ldr	r5, [pc, #44]	@ (8001064 <__libc_init_array+0x40>)
 8001036:	4c0c      	ldr	r4, [pc, #48]	@ (8001068 <__libc_init_array+0x44>)
 8001038:	f000 f818 	bl	800106c <_init>
 800103c:	1b64      	subs	r4, r4, r5
 800103e:	10a4      	asrs	r4, r4, #2
 8001040:	2600      	movs	r6, #0
 8001042:	42a6      	cmp	r6, r4
 8001044:	d105      	bne.n	8001052 <__libc_init_array+0x2e>
 8001046:	bd70      	pop	{r4, r5, r6, pc}
 8001048:	f855 3b04 	ldr.w	r3, [r5], #4
 800104c:	4798      	blx	r3
 800104e:	3601      	adds	r6, #1
 8001050:	e7ee      	b.n	8001030 <__libc_init_array+0xc>
 8001052:	f855 3b04 	ldr.w	r3, [r5], #4
 8001056:	4798      	blx	r3
 8001058:	3601      	adds	r6, #1
 800105a:	e7f2      	b.n	8001042 <__libc_init_array+0x1e>
 800105c:	08001084 	.word	0x08001084
 8001060:	08001084 	.word	0x08001084
 8001064:	08001084 	.word	0x08001084
 8001068:	08001088 	.word	0x08001088

0800106c <_init>:
 800106c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800106e:	bf00      	nop
 8001070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001072:	bc08      	pop	{r3}
 8001074:	469e      	mov	lr, r3
 8001076:	4770      	bx	lr

08001078 <_fini>:
 8001078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800107a:	bf00      	nop
 800107c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800107e:	bc08      	pop	{r3}
 8001080:	469e      	mov	lr, r3
 8001082:	4770      	bx	lr
